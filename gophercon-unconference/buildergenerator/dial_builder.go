// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// Autogenerated by buildergenerator
package exoml

import (
	"errors"
)

var _ = errors.New("_")

//SetAction sets Action for Dial struct instance
func (dial *Dial) SetAction(action string) *Dial {
	dial.Action = action
	return dial
}

//SetMethod sets Method for Dial struct instance
func (dial *Dial) SetMethod(method string) *Dial {
	dial.Method = method
	return dial
}

//SetTimeout sets Timeout for Dial struct instance
func (dial *Dial) SetTimeout(timeout int) *Dial {
	dial.Timeout = timeout
	return dial
}

//SetHangupOnStar sets HangupOnStar for Dial struct instance
func (dial *Dial) SetHangupOnStar(hanguponstar bool) *Dial {
	dial.HangupOnStar = hanguponstar
	return dial
}

//SetTimeLimit sets TimeLimit for Dial struct instance
func (dial *Dial) SetTimeLimit(timelimit int) *Dial {
	dial.TimeLimit = timelimit
	return dial
}

//SetCallerID sets CallerID for Dial struct instance
func (dial *Dial) SetCallerID(callerid string) *Dial {
	dial.CallerID = callerid
	return dial
}

//SetRecord sets Record for Dial struct instance
func (dial *Dial) SetRecord(record bool) *Dial {
	dial.Record = record
	return dial
}

//GetAction gets Action for Dial struct instance
func (dial *Dial) GetAction() string {
	return dial.Action
}

//GetMethod gets Method for Dial struct instance
func (dial *Dial) GetMethod() string {
	return dial.Method
}

//GetTimeout gets Timeout for Dial struct instance
func (dial *Dial) GetTimeout() int {
	return dial.Timeout
}

//GetHangupOnStar gets HangupOnStar for Dial struct instance
func (dial *Dial) GetHangupOnStar() bool {
	return dial.HangupOnStar
}

//GetTimeLimit gets TimeLimit for Dial struct instance
func (dial *Dial) GetTimeLimit() int {
	return dial.TimeLimit
}

//GetCallerID gets CallerID for Dial struct instance
func (dial *Dial) GetCallerID() string {
	return dial.CallerID
}

//GetRecord gets Record for Dial struct instance
func (dial *Dial) GetRecord() bool {
	return dial.Record
}

//Setter returns setter function for the field given
func (dial *Dial) Setter(field string) (setter func(interface{}) (*Dial, error)) {
	switch field {
	case "Action":
		setter = func(ActionField interface{}) (*Dial, error) {
			if ActionValue, ok := ActionField.(string); ok {
				return dial.SetAction(ActionValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "Method":
		setter = func(MethodField interface{}) (*Dial, error) {
			if MethodValue, ok := MethodField.(string); ok {
				return dial.SetMethod(MethodValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "Timeout":
		setter = func(TimeoutField interface{}) (*Dial, error) {
			if TimeoutValue, ok := TimeoutField.(int); ok {
				return dial.SetTimeout(TimeoutValue), nil
			}
			return nil, errors.New("Invalid type Expected int ")
		}
	case "HangupOnStar":
		setter = func(HangupOnStarField interface{}) (*Dial, error) {
			if HangupOnStarValue, ok := HangupOnStarField.(bool); ok {
				return dial.SetHangupOnStar(HangupOnStarValue), nil
			}
			return nil, errors.New("Invalid type Expected bool ")
		}
	case "TimeLimit":
		setter = func(TimeLimitField interface{}) (*Dial, error) {
			if TimeLimitValue, ok := TimeLimitField.(int); ok {
				return dial.SetTimeLimit(TimeLimitValue), nil
			}
			return nil, errors.New("Invalid type Expected int ")
		}
	case "CallerID":
		setter = func(CallerIDField interface{}) (*Dial, error) {
			if CallerIDValue, ok := CallerIDField.(string); ok {
				return dial.SetCallerID(CallerIDValue), nil
			}
			return nil, errors.New("Invalid type Expected string ")
		}
	case "Record":
		setter = func(RecordField interface{}) (*Dial, error) {
			if RecordValue, ok := RecordField.(bool); ok {
				return dial.SetRecord(RecordValue), nil
			}
			return nil, errors.New("Invalid type Expected bool ")
		}
	}
	return
}

//NewDial return a new Dial pointer
func NewDial() *Dial {
	return new(Dial)
}

//IDial The interface that satisfies all the methods for this struct
//IDial asserts implementation of setters for all the fields of Dial
type IDial interface {
	SetAction(action string) *Dial
	SetMethod(method string) *Dial
	SetTimeout(timeout int) *Dial
	SetHangupOnStar(hanguponstar bool) *Dial
	SetTimeLimit(timelimit int) *Dial
	SetCallerID(callerid string) *Dial
	SetRecord(record bool) *Dial
	Setter(string) func(interface{}) (*Dial, error)
}

//AddDial appends the verb to response
func (r *Response) AddDial(dial IDial) *Response {
	r.Response = append(r.Response, dial)
	return r
}
