// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// Autogenerated by buildergenerator
package exoml
import (
  "errors"
)
var _ = errors.New("_")
{{$name := .Name}}
{{range $index, $field := .Fields}}
//Set{{$field.FieldName}} sets {{$field.FieldName}} for {{$name}} struct instance
func ({{$name | receiver}} *{{$name}}) Set{{$field.FieldName}}({{$field.FieldName | lower}} {{$field.FieldType}}) *{{$name}}{
  {{$name | receiver}}.{{$field.FieldName}} = {{$field.FieldName | lower}}
  return {{$name | receiver}}
}
{{end}}

{{range $index, $field := .Fields}}
//Get{{$field.FieldName}} gets {{$field.FieldName}} for {{$name}} struct instance
func ({{$name | receiver}} *{{$name}}) Get{{$field.FieldName}}() {{$field.FieldType}}{
  return {{$name | receiver}}.{{$field.FieldName}}
}
{{end}}

//Setter returns setter function for the field given
func ({{$name | receiver}} *{{$name}}) Setter(field string) (setter func(interface{}) (*{{$name}}, error)) {
  switch field { {{range $index, $field := .Fields}}
case "{{$field.FieldName}}":
  setter = func({{$field.FieldName}}Field interface{}) (*{{$name}}, error) {
    if {{$field.FieldName}}Value, ok := {{$field.FieldName}}Field.({{$field.FieldType}}); ok {
      return {{$name | receiver}}.Set{{$field.FieldName}}({{$field.FieldName}}Value), nil
    }
    return nil, errors.New("Invalid type Expected {{$field.FieldType}}")
  }	{{end}}
  }
  return
}
//New{{.Name}} return a new {{.Name}} pointer
func New{{.Name}}() *{{.Name}} {
  return new({{.Name}})
}
//I{{.Name}} The interface that satisfies all the methods for this struct
//I{{.Name}} asserts implementation of setters for all the fields of {{.Name}}
type I{{.Name}}	interface {
    {{range $index, $field := .Fields}}Set{{$field.FieldName}}({{$field.FieldName | lower}} {{$field.FieldType}}) *{{$name}};{{end}}
    Setter(string) (func(interface{}) (*{{$name}}, error))
}
//Add{{.Name}} appends the verb to response
func (r *Response) Add{{.Name}}({{.Name|lower}} I{{.Name}}) *Response {
  r.Response = append(r.Response,{{.Name|lower}})
  return r
}
